from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from django.contrib.auth.models import User
from .serializers import UserSerializer
from django.contrib.auth import authenticate
from rest_framework_simplejwt.tokens import RefreshToken
from .utils import generate_qr_code_image
from django.shortcuts import get_object_or_404
from .models import QRCode
from .serializers import QRCodeSerializer
from rest_framework.permissions import IsAuthenticated
from rest_framework.pagination import PageNumberPagination
from rest_framework.permissions import IsAdminUser


@api_view(['POST'])
def register(request):
    """
    Register a new user with email and password.
    """
    if request.method == 'POST':
        username = request.data.get('username')
        email = request.data.get('email')
        password = request.data.get('password')

        if not username or not email or not password:
            return Response({'error': 'Username, email, and password are required.'}, status=status.HTTP_400_BAD_REQUEST)

        if User.objects.filter(username=username).exists() or User.objects.filter(email=email).exists():
            return Response({'error': 'Username or email already exists.'}, status=status.HTTP_400_BAD_REQUEST)

        user = User.objects.create_user(username=username, email=email, password=password)
        user.save()

        return Response({'message': 'User registered successfully.'}, status=status.HTTP_201_CREATED)

    return Response({'error': 'Method "GET" not allowed.'}, status=status.HTTP_405_METHOD_NOT_ALLOWED)


@api_view(['POST'])
def login(request):
    """
    Log in with email and password to obtain an authentication token.
    """
    if request.method == 'POST':
        username = request.data.get('username')
        password = request.data.get('password')

        user = authenticate(username=username, password=password)
        if user:
            refresh = RefreshToken.for_user(user)
            return Response({'token': str(refresh.access_token)}, status=status.HTTP_200_OK)
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_400_BAD_REQUEST)
    elif request.method == 'GET':
        return Response({'message': 'Login endpoint reached'}, status=status.HTTP_200_OK)


@api_view(['POST'])
def generate_qr_code(request):
    """
    Generate a new QR code by providing the type of information and relevant data.
    """
    type = request.data.get('type')
    data = request.data.get('data')
    
    if not type or not data:
        return Response({'error': 'Type and data are required.'}, status=status.HTTP_400_BAD_REQUEST)
    
    qr_code_image = generate_qr_code_image(data)
    
    return Response({'qr_code_image': qr_code_image}, status=status.HTTP_201_CREATED)


@api_view(['GET'])
def get_qr_code_details(request, pk):
    """
    Retrieve details of a specific QR code by its ID.
    """
    qr_code = get_object_or_404(QRCode, pk=pk)
    qr_code_serializer = QRCodeSerializer(qr_code)
    return Response(qr_code_serializer.data, status=status.HTTP_200_OK)
    
    
    
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_qr_codes(request):
    """
    Retrieve a list of all QR codes generated by the authenticated user.
    """
    qr_codes = QRCode.objects.filter(user=request.user)
    qr_code_type = request.query_params.get('type')
    if qr_code_type:
        qr_codes = qr_codes.filter(type=qr_code_type)
    
    paginator = PageNumberPagination()
    paginator.page_size = 10  
    result_page = paginator.paginate_queryset(qr_codes, request)
    qr_code_serializer = QRCodeSerializer(result_page, many=True)
    
    return paginator.get_paginated_response(qr_code_serializer.data)  


@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def update_qr_code(request, pk):
    """
    Update the data associated with a specific QR code.
    """
    try:
        qr_code = QRCode.objects.get(pk=pk, user=request.user)
    except QRCode.DoesNotExist:
        return Response({"error": "QR code not found"}, status=status.HTTP_404_NOT_FOUND)

    if request.method in ['PUT', 'PATCH']:
        serializer = QRCodeSerializer(qr_code, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)  
    
    
@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_qr_code(request, pk):
    """
    Delete a QR code specified by its ID.
    """
    try:
        qr_code = QRCode.objects.get(pk=pk, user=request.user)
    except QRCode.DoesNotExist:
        return Response({"error": "QR code not found"}, status=status.HTTP_404_NOT_FOUND)

    if request.method == 'DELETE':
        qr_code.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
    
    
@api_view(['GET'])
@permission_classes([IsAdminUser])
def get_all_users(request):
    """
    Retrieve a list of all users (admin privilege required).
    """
    users = User.objects.all()
    serializer = UserSerializer(users, many=True)
    return Response(serializer.data, status=status.HTTP_200_OK)

@api_view(['PUT'])
@permission_classes([IsAdminUser])
def update_user(request, pk):
    """
    Update user details (admin privilege required).
    """
    user = get_object_or_404(User, pk=pk)
    serializer = UserSerializer(user, data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_200_OK)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['DELETE'])
@permission_classes([IsAdminUser])
def delete_user(request, pk):
    """
    Delete a user account (admin privilege required).
    """
    user = get_object_or_404(User, pk=pk)
    user.delete()
    return Response(status=status.HTTP_204_NO_CONTENT)    